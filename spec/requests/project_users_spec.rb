require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/project_users", type: :request do
  let(:user) { create(:user) }
  let(:other_user) { create(:user) }
  let(:project_user) { create(:project_user, user:) }
  let(:project) { project_user.project }

  before { sign_in user }

  # This should return the minimal set of attributes required to create a valid
  # ProjectUser. As you add validations to ProjectUser, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { user_id: other_user.id }
  }

  let(:invalid_attributes) {
    { user_id: '0' }
  }

  describe "GET /index" do
    it "renders a successful response" do
      get project_users_url(project)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_project_user_url(project)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ProjectUser" do
        expect {
          post project_users_url(project), params: { project_user: valid_attributes }
        }.to change(project.project_users, :count).by(1)
      end

      it "redirects to the project" do
        post project_users_url(project), params: { project_user: valid_attributes }
        expect(response).to redirect_to(project_url(project))
      end
    end

    context "with invalid parameters" do
      it "does not create a new ProjectUser" do
        expect {
          post project_users_url(project), params: { project_user: invalid_attributes }
        }.to change(project.project_users, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post project_users_url(project), params: { project_user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested project_user" do
      project_user
      expect {
        delete project_user_url(project, project_user)
      }.to change(project.project_users, :count).by(-1)
    end

    it "redirects to the project" do
      delete project_user_url(project, project_user)
      expect(response).to redirect_to(project_url(project))
    end
  end
end
