require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/comments", type: :request do
  let(:project_user) { create(:project_user) }
  let(:user) { project_user.user }
  let(:project) { project_user.project }
  let(:comment) { create(:comment, **valid_attributes, user:, project:) }

  before { sign_in user }

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { body: "My comment" }
  }

  let(:invalid_attributes) {
    { body: "" }
  }

  describe "GET /new" do
    it "renders a successful response" do
      get new_project_comment_url(project)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      get edit_project_comment_url(project, comment)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Comment" do
        expect {
          post project_comments_url(project), params: { comment: valid_attributes }
        }.to change(project.comments, :count).by(1)
      end

      it "redirects to the new form" do
        post project_comments_url(project), params: { comment: valid_attributes }
        expect(response).to redirect_to(new_project_comment_url(project))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Comment" do
        expect {
          post project_comments_url(project), params: { comment: invalid_attributes }
        }.to change(project.comments, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post project_comments_url(project), params: { comment: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { body: "Edited comment" }
      }

      it "updates the requested comment" do
        patch project_comment_url(project, comment), params: { comment: new_attributes }
        comment.reload
        expect(comment.body).to eq("Edited comment")
        expect(comment.user).to eq(user)
        expect(comment.project).to eq(project)
      end

      it "redirects to the project" do
        patch project_comment_url(project, comment), params: { comment: new_attributes }
        comment.reload
        expect(response).to redirect_to(project_url(project))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch project_comment_url(project, comment), params: { comment: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested comment" do
      comment
      expect {
        delete project_comment_url(project, comment)
      }.to change(Comment, :count).by(-1)
    end

    it "redirects to the comments list" do
      delete project_comment_url(project, comment)
      expect(response).to redirect_to(project_url(project))
    end
  end
end
